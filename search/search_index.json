{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PX4_ROS2_workspace Documentation Overview Welcome to the PX4_ROS2_workspace documentation. This repository integrates the PX4 autopilot software with ROS 2, providing tools and scripts to facilitate development. This documentation will guide you through the installation, configuration, and usage of the PX4_ROS2_workspace. It is designed to help developers and users effectively utilize the tools and scripts provided in this repository. Dependencies This workspace requires only git and docker to be installed on your system. Docker containers provide all the necessary dependencies and tools to work with PX4 and ROS 2. Additionally, for SITL simulation using an NVIDIA GPU, you will need to have nvidia-container-runtime installed. Other GPUs are not supported.","title":"Home"},{"location":"#px4_ros2_workspace-documentation","text":"","title":"PX4_ROS2_workspace Documentation"},{"location":"#overview","text":"Welcome to the PX4_ROS2_workspace documentation. This repository integrates the PX4 autopilot software with ROS 2, providing tools and scripts to facilitate development. This documentation will guide you through the installation, configuration, and usage of the PX4_ROS2_workspace. It is designed to help developers and users effectively utilize the tools and scripts provided in this repository.","title":"Overview"},{"location":"#dependencies","text":"This workspace requires only git and docker to be installed on your system. Docker containers provide all the necessary dependencies and tools to work with PX4 and ROS 2. Additionally, for SITL simulation using an NVIDIA GPU, you will need to have nvidia-container-runtime installed. Other GPUs are not supported.","title":"Dependencies"},{"location":"firmware/","text":"Firmware Utilities Guide Introduction This guide provides instructions on how to use the firmware scripts to flash PX4 firmware to a device and upload parameters using Docker. Firmware Flashing The firmware_upload.sh script automates the process of setting up the PX4-Autopilot environment, checking out the desired git branch or tag, and flashing the firmware to a specified platform. If no options are provided, the script will ask for the necessary information through prompts. Usage Your device must be connected to your computer via USB. The script will automatically detect the device and flash the firmware. /tools/docker_scripts/firmware_upload.sh Options -h : Show help message and exit -b : Specify the git branch. -t : Specify the git tag (latest or custom). -p : Specify the target platform (e.g., px4_fmu-v6x). -a : Automatically clone PX4-Autopilot if not found. Examples /tools/docker_scripts/firmware_upload.sh -b main -p px4_fmu-v6x -a /tools/docker_scripts/firmware_upload.sh -t latest -p px4_fmu-v6x -a Parameters Upload The parameters_upload.sh script uploads parameters to a PX4 device using Docker. Usage Your device must be connected to your computer via USB. The script will automatically detect the device and upload the parameters. /tools/docker_scripts/parameters_upload.sh -f <path_to_parameter_file> Parameter File Structure The parameter file is a text file containing the parameters to upload. Each line should contain a parameter name and value separated by a space. Float parameters should be written with a decimal point as the type is inferred from the value. For example: UXRCE_DDS_CFG 1000 EKF2_ABIAS_INIT 0.15 See the PX4 documentation for a list of parameters. Options -h : Show help message and exit -f : Specify the parameter file defining the parameters to upload.","title":"Firmware"},{"location":"firmware/#firmware-utilities-guide","text":"","title":"Firmware Utilities Guide"},{"location":"firmware/#introduction","text":"This guide provides instructions on how to use the firmware scripts to flash PX4 firmware to a device and upload parameters using Docker.","title":"Introduction"},{"location":"firmware/#firmware-flashing","text":"The firmware_upload.sh script automates the process of setting up the PX4-Autopilot environment, checking out the desired git branch or tag, and flashing the firmware to a specified platform. If no options are provided, the script will ask for the necessary information through prompts.","title":"Firmware Flashing"},{"location":"firmware/#usage","text":"Your device must be connected to your computer via USB. The script will automatically detect the device and flash the firmware. /tools/docker_scripts/firmware_upload.sh","title":"Usage"},{"location":"firmware/#options","text":"-h : Show help message and exit -b : Specify the git branch. -t : Specify the git tag (latest or custom). -p : Specify the target platform (e.g., px4_fmu-v6x). -a : Automatically clone PX4-Autopilot if not found.","title":"Options"},{"location":"firmware/#examples","text":"/tools/docker_scripts/firmware_upload.sh -b main -p px4_fmu-v6x -a /tools/docker_scripts/firmware_upload.sh -t latest -p px4_fmu-v6x -a","title":"Examples"},{"location":"firmware/#parameters-upload","text":"The parameters_upload.sh script uploads parameters to a PX4 device using Docker.","title":"Parameters Upload"},{"location":"firmware/#usage_1","text":"Your device must be connected to your computer via USB. The script will automatically detect the device and upload the parameters. /tools/docker_scripts/parameters_upload.sh -f <path_to_parameter_file>","title":"Usage"},{"location":"firmware/#parameter-file-structure","text":"The parameter file is a text file containing the parameters to upload. Each line should contain a parameter name and value separated by a space. Float parameters should be written with a decimal point as the type is inferred from the value. For example: UXRCE_DDS_CFG 1000 EKF2_ABIAS_INIT 0.15 See the PX4 documentation for a list of parameters.","title":"Parameter File Structure"},{"location":"firmware/#options_1","text":"-h : Show help message and exit -f : Specify the parameter file defining the parameters to upload.","title":"Options"},{"location":"simulation/","text":"Simulation Guide Introduction This guide provides instructions on how to use the simulation scripts to generate airframe models and launch simulations for PX4 Autopilot with Gazebo using Docker. Generate Airframe Model Description The PX4 repository contains models for various airframes. However, you may need to create a custom airframe model for your vehicle. The generate_airframe.sh script generates a model for a multirotor vehicle based on configurations provided in a YAML file. It will generate a .sdf file for the airframe model, which can be used in Gazebo simulations already containing the plugins required for PX4 SITL simulation. It will also generate a configuration file for the airframe model, which can be used to specify the vehicle parameters in the PX4 firmware. The generated airframe model will be saved in the gz_sim/custom_airframes directory. The model visuals are very basic, but you can modify the generated .sdf file to provide your own meshes afterward. Usage /tools/docker_scripts/generate_airframe.sh -f <path_to_yaml_file> YAML Configuration Structure model_name: \"model_name\" arm_length: 1.0 # in meters num_motors: 4 # Should be at least 2 and even angle_offset: 45 # in degrees weight: 1.0 # in kg Ixx: 0.03 # in kg*m^2 Iyy: 0.03 # in kg*m^2 Izz: 0.03 # in kg*m^2 max_motor_thrust: 10.0 # in N first_motor_cw: true # Optional, defaults to True angle_offset is the angle between the first motor and the x-axis to use when no motor is aligned with the x-axis of the UAV. first_motor_cw specifies if the first motor rotates clockwise. If not specified, it defaults to True . The motors will be alternatively clockwise and counterclockwise. Options -h : Show help message and exit -f : Specify the configuration file to use Simulation with Gazebo The launch_simulation.sh script automates the launch of a simulation for PX4 Autopilot with Gazebo using Docker. Usage /tools/docker_scripts/launch_simulation.sh -f <path_to_yaml_file> YAML Configuration Structure headless: false world: default models: - name: gz_x500 pose: [0, 0, 0, 0, 0, 0] - name: gz_x500 pose: [2, 0, 0, 0, 0, 0] headless specifies whether to run the simulation in headless mode. If not specified, it defaults to False . world specifies the world file to use for the simulation. Any world of the PX4 repository or any custom world in the gz_sim/custom_worlds directory can be used. models is a list of models to spawn in the simulation. Each model has a name and a pose in the format [x, y, z, roll, pitch, yaw] . Any model of the PX4 repository or any custom model in the gz_sim/custom_airframes directory can be used. Options -h : Show help message and exit -b : Specify the git branch of the PX4-Autopilot repository. -t : Specify the git tag (latest or custom) of the PX4-Autopilot repository. -f : Specify the configuration file for the simulation. -a : Automatically clone PX4-Autopilot repository if not found. Both -b and -t options cannot be used at the same time. If neither is provided, the script will use the current branch of the PX4-Autopilot repository.","title":"Simulation"},{"location":"simulation/#simulation-guide","text":"","title":"Simulation Guide"},{"location":"simulation/#introduction","text":"This guide provides instructions on how to use the simulation scripts to generate airframe models and launch simulations for PX4 Autopilot with Gazebo using Docker.","title":"Introduction"},{"location":"simulation/#generate-airframe-model","text":"","title":"Generate Airframe Model"},{"location":"simulation/#description","text":"The PX4 repository contains models for various airframes. However, you may need to create a custom airframe model for your vehicle. The generate_airframe.sh script generates a model for a multirotor vehicle based on configurations provided in a YAML file. It will generate a .sdf file for the airframe model, which can be used in Gazebo simulations already containing the plugins required for PX4 SITL simulation. It will also generate a configuration file for the airframe model, which can be used to specify the vehicle parameters in the PX4 firmware. The generated airframe model will be saved in the gz_sim/custom_airframes directory. The model visuals are very basic, but you can modify the generated .sdf file to provide your own meshes afterward.","title":"Description"},{"location":"simulation/#usage","text":"/tools/docker_scripts/generate_airframe.sh -f <path_to_yaml_file>","title":"Usage"},{"location":"simulation/#yaml-configuration-structure","text":"model_name: \"model_name\" arm_length: 1.0 # in meters num_motors: 4 # Should be at least 2 and even angle_offset: 45 # in degrees weight: 1.0 # in kg Ixx: 0.03 # in kg*m^2 Iyy: 0.03 # in kg*m^2 Izz: 0.03 # in kg*m^2 max_motor_thrust: 10.0 # in N first_motor_cw: true # Optional, defaults to True angle_offset is the angle between the first motor and the x-axis to use when no motor is aligned with the x-axis of the UAV. first_motor_cw specifies if the first motor rotates clockwise. If not specified, it defaults to True . The motors will be alternatively clockwise and counterclockwise.","title":"YAML Configuration Structure"},{"location":"simulation/#options","text":"-h : Show help message and exit -f : Specify the configuration file to use","title":"Options"},{"location":"simulation/#simulation-with-gazebo","text":"The launch_simulation.sh script automates the launch of a simulation for PX4 Autopilot with Gazebo using Docker.","title":"Simulation with Gazebo"},{"location":"simulation/#usage_1","text":"/tools/docker_scripts/launch_simulation.sh -f <path_to_yaml_file>","title":"Usage"},{"location":"simulation/#yaml-configuration-structure_1","text":"headless: false world: default models: - name: gz_x500 pose: [0, 0, 0, 0, 0, 0] - name: gz_x500 pose: [2, 0, 0, 0, 0, 0] headless specifies whether to run the simulation in headless mode. If not specified, it defaults to False . world specifies the world file to use for the simulation. Any world of the PX4 repository or any custom world in the gz_sim/custom_worlds directory can be used. models is a list of models to spawn in the simulation. Each model has a name and a pose in the format [x, y, z, roll, pitch, yaw] . Any model of the PX4 repository or any custom model in the gz_sim/custom_airframes directory can be used.","title":"YAML Configuration Structure"},{"location":"simulation/#options_1","text":"-h : Show help message and exit -b : Specify the git branch of the PX4-Autopilot repository. -t : Specify the git tag (latest or custom) of the PX4-Autopilot repository. -f : Specify the configuration file for the simulation. -a : Automatically clone PX4-Autopilot repository if not found. Both -b and -t options cannot be used at the same time. If neither is provided, the script will use the current branch of the PX4-Autopilot repository.","title":"Options"},{"location":"structure/","text":"Repository Structure The repository contains the following key directories and files: docker/ - Directory containing Dockerfiles for building Docker images used in the project. gz_sim/ - Directory containing Gazebo custom simulation files. custom_airframes/ - Directory containing custom airframe models for the Gazebo simulator with PX4 SITL. custom_worlds/ - Directory containing custom world models for the Gazebo simulator with PX4 SITL. tests/ - Directory containing test scripts. tools/ - Directory containing various utility scripts. configurations/ - Directory containing examples of configuration files for the scripts. docker_scripts/ - Directory containing scripts that run Docker containers. scripts/ - Directory containing shell and Python scripts called by the Docker scripts. These can be run outside of Docker as well with proper dependencies installed.","title":"Repository Structure"},{"location":"structure/#repository-structure","text":"The repository contains the following key directories and files: docker/ - Directory containing Dockerfiles for building Docker images used in the project. gz_sim/ - Directory containing Gazebo custom simulation files. custom_airframes/ - Directory containing custom airframe models for the Gazebo simulator with PX4 SITL. custom_worlds/ - Directory containing custom world models for the Gazebo simulator with PX4 SITL. tests/ - Directory containing test scripts. tools/ - Directory containing various utility scripts. configurations/ - Directory containing examples of configuration files for the scripts. docker_scripts/ - Directory containing scripts that run Docker containers. scripts/ - Directory containing shell and Python scripts called by the Docker scripts. These can be run outside of Docker as well with proper dependencies installed.","title":"Repository Structure"}]}